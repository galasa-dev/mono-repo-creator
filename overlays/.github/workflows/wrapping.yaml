#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
name: Wrapping Main Build

on:
  workflow_call:
    inputs:
      changed:
        description: 'True if this module has been changed and should be rebuilt'
        required: true
        type: string
      jacoco_enabled:
        description: 'True if Jacoco code coverage should be enabled (set to "false" for release builds)'
        required: false
        default: 'true'
        type: string
      sign_artifacts:
        description: 'True if the artifacts built should be signed (set to "false" for development branch builds)'
        required: false
        default: 'true'
        type: string

env:
  BRANCH: ${{ github.ref_name }}

jobs:

  log-unchanged:
    name: Wrapping is unchanged
    if: ${{ inputs.changed == 'false' }}
    runs-on: ubuntu-latest

    steps:
      - name: Log this module is unchanged
        run: |
          echo "The wrapping module is unchanged"

  log-github-ref:
    name: Log the GitHub ref this workflow is running on (Branch or tag that received dispatch)
    if: ${{ inputs.changed == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Log GitHub ref of workflow
        run: |
          echo "This workflow is running on GitHub ref ${{ env.BRANCH }}"

  build-wrapping:
    name: Build Wrapping source code and Docker image for development Maven registry
    if: ${{ inputs.changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'semeru'

      # The githash is added to the development Maven registry to show what commit level it contains
      - name: Print githash
        run: |
          echo $GITHUB_SHA > ./wrapping.githash

      # Copy secrets into files to use in workflow
      - name: Make secrets directory
        run: |
          mkdir /home/runner/work/secrets
      - name: Copy settings.xml
        env:
          MAVEN_SETTINGS_XML: ${{ secrets.MAVEN_SETTINGS_XML }}
        run: |
          echo $MAVEN_SETTINGS_XML > /home/runner/work/secrets/settings.xml
      - name: Copy GPG passphrase
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo $GPG_PASSPHRASE > /home/runner/work/secrets/passphrase.file
      - name: Copy GPG key
        env:
          GPG_KEY_BASE64: ${{ secrets.GPG_KEY }}
        run: |
          echo $GPG_KEY_BASE64 |  base64 --decode > /home/runner/work/secrets/galasa.gpg
          
      # Set up Maven GPG directory
      - name: Make GPG home directory
        run: |
          mkdir /home/runner/work/gpg
      
      - name: Change directory permissions
        run: |
          chmod '700' /home/runner/work/gpg

      - name: Import GPG
        run: |
          gpg --homedir /home/runner/work/gpg --pinentry-mode loopback --passphrase-file /home/runner/work/secrets/passphrase.file --import /home/runner/work/secrets/galasa.gpg
      
      - name: Copy custom settings.xml
        run: |
          cp /home/runner/work/secrets/settings.xml /home/runner/work/gpg/settings.xml

      - name: Build Wrapping source code
        working-directory: modules/wrapping
        run : |
          set -o pipefail
          mvn deploy -X \
          -Dgalasa.source.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.central.repo=https://repo.maven.apache.org/maven2/ \
          -Dgalasa.release.repo=file:${{ github.workspace }}/modules/wrapping/repo \
          -Dgalasa.jacocoEnabled=${{ inputs.jacoco_enabled }} \
          -Dgalasa.isRelease=${{ inputs.sign_artifacts }} \
          --batch-mode --errors --fail-at-end \
          --settings /home/runner/work/gpg/settings.xml 2>&1 | tee build.log

      - name: Upload Maven Build Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: wrapping-maven-build-log
          path: modules/wrapping/build.log

      - name: Upload wrapping artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wrapping
          path: modules/wrapping/repo/dev/galasa
          retention-days: 7

  report-failure:
    name: Report failure in workflow
    runs-on: ubuntu-latest
    needs: [log-github-ref, build-wrapping]
    if: failure()

    steps:
      - name: Report failure in workflow to Slack
        env: 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run : |
          docker run --rm ghcr.io/galasa-dev/galasabld-ibm:main slackpost workflows --repo "wrapping" --workflowName "${{ github.workflow }}" --workflowRunNum "${{ github.run_id }}" --ref "${{ env.BRANCH }}" --hook "${{ env.SLACK_WEBHOOK }}"
